[
  {
    "name": "loaderStates",
    "type": "enumeration",
    "description": "States returned by `GetLoaderStatus`.",
    "members": [{
      "key": "lsInactive",
      "description": "Indicates the loader hasn't been run and isn't running."
    }, {
      "key": "lsActive",
      "description": "Indicates the loader is currently active."
    }, {
      "key": "lsDone",
      "description": "Indicates the loader is done."
    }, {
      "key": "lsError",
      "description": "Indicates the loader encountered an error."
    }]
  },
  {
    "name": "gameModes",
    "type": "enumeration",
    "description": "Game modes for use with `SetGameMode`.",
    "members": [
      {
        "key": "gmFNV",
        "description": "Fallout: New Vegas"
      },
      {
        "key": "gmFO3",
        "description": "Fallout 3"
      },
      {
        "key": "gmTES4",
        "description": "The Elder Scrolls IV: Oblivion"
      },
      {
        "key": "gmTES5",
        "description": "The Elder Scrolls V: Skyrim"
      },
      {
        "key": "gmSSE",
        "description": "Skyrim: Special Edition"
      },
      {
        "key": "gmFO4",
        "description": "Fallout 4"
      },
      {
        "key": "gmTES5VR",
        "description": "Skyrim VR"
      },
      {
        "key": "gmFO4VR",
        "description": "Fallout 4 VR"
      }
    ]
  },
  {
    "name": "games",
    "type": "array of object",
    "objectSchema": {
      "name": "Game Object",
      "properties": [
        {
          "key": "name",
          "type": "string",
          "description": "The name of the game used for display purposes."
        },
        {
          "key": "shortName",
          "type": "string",
          "description": "The name of the game used to find the correct Hardcoded.dat file."
        },
        {
          "key": "mode",
          "type": "integer",
          "description": "The game mode for the game."
        },
        {
          "key": "exeName",
          "type": "string",
          "description": "The filename of the game executable."
        }
      ]
    },
    "description": "Array of game objects corresponding to each supported game mode."
  },
  {
    "name": "GetGamePath",
    "args": [{
      "name": "gameMode",
      "type": "integer"
    }],
    "returns": {
      "type": "string"
    },
    "description": "Retrieves the path to the game corresponding to `gameMode` from the registry.  Returns an empty string if the game path cannot be found.  See the `gameModes` enumeration for a list of allowed valid game modes."
  },
  {
    "name": "SetGamePath",
    "icons": ["warn"],
    "args": [{
      "name": "gamePath",
      "type": "string"
    }],
    "description": "Sets the game path to be used when loading plugin and resource files to `gamePath`."
  },
  {
    "name": "GetGameLanguage",
    "args": [{
      "name": "gameMode",
      "type": "integer"
    }],
    "returns": {
      "type": "string"
    },
    "description": "Retrieves the the language used for `gameMode` from the game INI file.  Returns an empty string if the game INI file cannot be found.  See the `gameModes` enumeration for a list of allowed valid game modes."
  },
  {
    "name": "SetLanguage",
    "icons": ["warn"],
    "args": [{
      "name": "language",
      "type": "string"
    }],
    "description": "Sets the language to be used when loading string files to `language`."
  },
  {
    "name": "SetGameMode",
    "icons": ["warn"],
    "args": [{
      "name": "gameMode",
      "type": "integer"
    }],
    "description": "Sets the game mode to `gameMode`.  See the `gameModes` enumeration for a list of allowed valid game modes."
  },
  {
    "name": "GetLoadOrder",
    "icons": ["warn"],
    "args": [],
    "returns": {
      "type": "string"
    },
    "description": "Returns the user's load order determined from loadorder.txt, plugins.txt, or plugin dates depending on the game and available files.  The load order is returned as a list of filenames separated by `\\r\\n`."
  },
  {
    "name": "GetActivePlugins",
    "icons": ["warn"],
    "args": [],
    "returns": {
      "type": "string"
    },
    "description": "Returns the user's active plugins determined from plugins.txt. Active plugins are returned as a list of filenames separated by `\\r\\n`."
  },
  {
    "name": "LoadPlugins",
    "icons": ["warn"],
    "args": [{
      "name": "loadOrder",
      "type": "string",
      "description": "List of filenames separated by \\r\\n to load."
    }, {
      "name": "smartLoad",
      "type": "boolean",
      "description": "Default true."
    }],
    "description": "Loads plugin files in `loadOrder`.  If `smartLoad` is set to true, master files required by files in `loadOrder` will be automatically loaded as necessary.  Plugin loading is performed in a background thread, use `GetLoaderStatus` to track the loader and determine when it is done."
  },
  {
    "name": "LoadPlugin",
    "args": [{
      "name": "filename",
      "type": "string"
    }],
    "description": "Loads the plugin file `filename` at the next available load order position after currently loaded plugins files.  Plugin loading is performed in a background thread, use `GetLoaderStatus` to track the loader and determine when it is done."
  },
  {
    "name": "LoadPluginHeader",
    "args": [{
      "name": "filename",
      "type": "string"
    }],
    "description": "Loads the header of plugin file `filename` and returns a handle to it.  This plugin should be unloaded with `UnloadPlugin` once you're done with it.  Note: Unlike `LoadPlugin`, this function does not use a background thread."
  },
  {
    "name": "BuildReferences",
    "args": [{
      "name": "id",
      "type": "handle"
    }, {
      "name": "sync",
      "type": "boolean",
      "description": "When false the references will be built asynchronously using the loader.  Use GetLoaderStatus to see when reference building is complete.  Defaults to true."
    }],
    "description": "Builds referenced by information for the plugin file `id`.  If `id` is 0 reference information will be built for all loaded plugins."
  },
  {
    "name": "UnloadPlugin",
    "args": [{
      "name": "id",
      "type": "handle"
    }],
    "description": "Unloads the plugin file `id`.  Only plugins at the end of the active load order which have not have references built can be unloaded.  Plugin headers loaded with `LoadPluginHeader` can also be unloaded."
  },
  {
    "name": "GetLoaderStatus",
    "args": [],
    "returns": {
      "type": "integer"
    },
    "description": "Returns the status of the loader.  See `loaderStates` for more information."
  },
  {
    "name": "GetLoadedFileNames",
    "args": [{
      "name": "excludeHardcoded",
      "type": "boolean",
      "description": "Default true."
    }],
    "returns": {
      "type": "array of string"
    },
    "description": "Returns an array of all loaded filenames.  Excludes hardcoded files if `excludeHardcoded` is true."
  }
]
